syntax = "proto3";

option csharp_namespace = "Hotel";

package hotel;

// Общие сообщения
message Empty {}

message Ack {
    bool success = 1;
    string message = 2;
}

// Авторизация
message LoginRequest {
    string username = 1;
    string password = 2;
}

message LoginResponse {
    bool success = 1;
    string message = 2;
    string role = 3;
}

service AuthService {
    rpc Login(LoginRequest) returns (LoginResponse);
}

// Бронирование
message BookingRequest {
    string customer_name = 1;
    string room_type = 2;
    string check_in_date = 3;
    string check_out_date = 4;
}

message BookingResponse {
    bool success = 1;
    string message = 2;
}

message Booking {
    int32 id = 1;
    string customer_name = 2;
    string room_type = 3;
    string check_in_date = 4;
    string check_out_date = 5;
}

message BookingListResponse {
    repeated Booking bookings = 1;
}

service BookingService {
    rpc BookRoom(BookingRequest) returns (BookingResponse);
    rpc GetBookings(Empty) returns (BookingListResponse);
}

// Заявки на уборку
message CleaningRequest {
    int32 id = 1;
    string room_number = 2;
    string category = 3;
    bool completed = 4;
}

message CleaningRequestList {
    repeated CleaningRequest requests = 1;
}

message CleaningRequestId {
    int32 id = 1;
}

service CleaningService {
    rpc GetCleaningRequests(Empty) returns (CleaningRequestList);
    rpc CompleteRequest(CleaningRequestId) returns (Ack);
}

// Клиенты
message ClientRequest {
    string lastName = 1;
    string firstName = 2;
    string middleName = 3;
    string phone = 4;
    string passportSeries = 5;
    string passportNumber = 6;
    string email = 7;
}

message ClientResponse {
    int32 id = 1;
    string lastName = 2;
    string firstName = 3;
    string middleName = 4;
    string phone = 5;
    string passportSeries = 6;
    string passportNumber = 7;
    string email = 8;
    string message = 9;
    bool success = 10;
    string fullName = 11;
    string passport = 12;
}

message ClientListResponse {
    repeated ClientResponse clients = 1;
}

message GetClientRequest {
    int32 id = 1;
}

service ClientService {
    rpc AddClient (ClientRequest) returns (ClientResponse);
    rpc GetAllClients (Empty) returns (ClientListResponse);
    rpc GetClient (GetClientRequest) returns (ClientResponse);
}
